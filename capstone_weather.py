# -*- coding: utf-8 -*-
"""Capstone_weather.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aPQeAfWFM7PkYVEtvbxSag3Z2nwFA7t1
"""

import requests
from pprint import pprint
import os
from dotenv import load_dotenv
import psycopg2 as psql
from datetime import datetime

load_dotenv()

key = os.getenv('KEY')
user = os.getenv('SQL_USER')
password = os.getenv('SQL_PASS')
my_host = os.getenv('HOST')

conn = psql.connect(database = "pagila",
                    user = user,
                    host = my_host,
                    password = password,
                    port = 5432)

url = f'http://api.weatherapi.com/v1/current.json?key={key}&q=London&aqi=yes'

response = requests.get(url).json()

d = response['current']['last_updated']
date_format = '%Y-%m-%d %H:%M'
last_updated = datetime.strptime(d, date_format)
temp = response['current']['temp_c']
feelslike = response['current']['feelslike_c']
precipitation = response['current']['precip_mm']
humidity = response['current']['humidity']

cloud_cover = response['current']['cloud']
condition_pic = response['current']['condition']['icon']
condition_desc = response['current']['condition']['text']

wind_direction = response['current']['wind_dir']
wind_speed = response['current']['wind_mph']
windchill = response['current']['windchill_c']

defra_index = response['current']['air_quality']['gb-defra-index']
if defra_index <= 3:
  air_quality = 'Low air pollution'
elif defra_index <= 6:
  air_quality = 'Moderate air pollution'
elif defra_index <= 9:
  air_quality = 'High air pollution'
else:
  air_quality = 'Very high air pollution'
pollutants = {k: response['current']['air_quality'][k] for k in ['co','no2','o3','pm10','pm2_5','so2']}

new_weather = {'update_time':last_updated,
               'temperature':temp,
               'feelslike':feelslike,
               'precipitation':precipitation,
               'humidity':humidity,
               'cloud_cover':cloud_cover,
               'condition_pic':condition_pic,
               'condition_desc':condition_desc,
               'wind_direction':wind_direction,
               'wind_speed':wind_speed,
               'windchill':windchill,
               'defra_index':defra_index,
               'air_quality':air_quality,
               'co':pollutants['co'],
               'no2':pollutants['no2'],
               'o3':pollutants['o3'],
               'pm10':pollutants['pm10'],
               'pm2_5':pollutants['pm2_5'],
               'so2':pollutants['so2']
                }

sql = f"""
      INSERT INTO student.ar_weather(update_time, temperature, feelslike,
                                      precipitation, humidity, cloud_cover,
                                      condition_pic, condition_desc,
                                      wind_direction, wind_speed, windchill,
                                      defra_index, air_quality, co, no2, o3,
                                      pm10, pm2_5, so2)
      values ('{new_weather['update_time']}',
              {new_weather['temperature']},
              {new_weather['feelslike']},
              {new_weather['precipitation']},
              {new_weather['humidity']},
              {new_weather['cloud_cover']},
              '{new_weather['condition_pic']}',
              '{new_weather['condition_desc']}',
              '{new_weather['wind_direction']}',
              {new_weather['wind_speed']},
              {new_weather['windchill']},
              {new_weather['defra_index']},
              '{new_weather['air_quality']}',
              {new_weather['co']},
              {new_weather['no2']},
              {new_weather['o3']},
              {new_weather['pm10']},
              {new_weather['pm2_5']},
              {new_weather['so2']})
      """

cur = conn.cursor()
cur.execute(sql)
conn.commit()
conn.close()